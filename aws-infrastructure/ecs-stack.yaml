AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Stack for Shield Your Assets API'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: shield-assets-prod
  
  ImageUri:
    Description: Container image URI
    Type: String
    Default: nginx:latest  # Will be updated during deployment
  
  ContainerPort:
    Description: Port the container listens on
    Type: Number
    Default: 3001
  
  DesiredCount:
    Description: Number of tasks to run
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cluster

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-api
      RetentionInDays: 30

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
                  - !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}/jwt-secret*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}/ghl-credentials*'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-execution-role

  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-alb-sg
      GroupDescription: Security group for Shield Assets ALB
      VpcId: !ImportValue
        Fn::Sub: ${EnvironmentName}-VPC-ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg

  # Update ECS Security Group to allow ALB traffic
  ECSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue
        Fn::Sub: ${EnvironmentName}-ECS-SG-ID
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !ImportValue
          Fn::Sub: ${EnvironmentName}-PUBLIC-SUBNET-1
        - !ImportValue
          Fn::Sub: ${EnvironmentName}-PUBLIC-SUBNET-2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-api-tg
      Protocol: HTTP
      Port: !Ref ContainerPort
      VpcId: !ImportValue
        Fn::Sub: ${EnvironmentName}-VPC-ID
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-api-tg

  # HTTP Listener (redirects to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !ImportValue
        Fn::Sub: ${EnvironmentName}-ECS-TASK-ROLE-ARN
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-api
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Secrets:
            - Name: DB_HOST
              ValueFrom: !Sub 
                - '${SecretArn}:host::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_PORT
              ValueFrom: !Sub 
                - '${SecretArn}:port::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_NAME
              ValueFrom: !Sub 
                - '${SecretArn}:dbname::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_USER
              ValueFrom: !Sub 
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_PASSWORD
              ValueFrom: !Sub 
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: S3_DOCUMENTS_BUCKET
              ValueFrom: !Sub 
                - '${SecretArn}:documents_bucket::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
            - Name: S3_REPORTS_BUCKET
              ValueFrom: !Sub 
                - '${SecretArn}:reports_bucket::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 'curl -f http://localhost:${ContainerPort}/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-api-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-PRIVATE-SUBNET-1
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-PRIVATE-SUBNET-2
          SecurityGroups:
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-ECS-SG-ID
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Sub ${EnvironmentName}-api
          ContainerPort: !Ref ContainerPort
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-api-service

  # Auto Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ResourceId: !Ref AutoScalingTarget
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}-ALB-URL

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALB-DNS

  LoadBalancerArn:
    Description: ARN of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${EnvironmentName}-ALB-ARN

  TargetGroupArn:
    Description: ARN of the target group
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${EnvironmentName}-TARGET-GROUP-ARN

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}-ECS-CLUSTER

  ECSServiceName:
    Description: Name of the ECS service
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub ${EnvironmentName}-ECS-SERVICE