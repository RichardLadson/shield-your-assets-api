AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple ECS Stack for Shield Your Assets API'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: shield-assets-prod
  
  ImageUri:
    Description: Container image URI
    Type: String
    Default: 511402284942.dkr.ecr.us-east-1.amazonaws.com/shield-assets-api:latest

Resources:
  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-api
      RetentionInDays: 30

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
                  - !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
                  - !ImportValue
                    Fn::Sub: ${EnvironmentName}-JWT-SECRET-ARN

  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-alb-sg
      GroupDescription: Security group for Shield Assets ALB
      VpcId: !ImportValue
        Fn::Sub: ${EnvironmentName}-VPC-ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Update ECS Security Group to allow ALB traffic
  ECSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue
        Fn::Sub: ${EnvironmentName}-ECS-SG-ID
      IpProtocol: tcp
      FromPort: 3001
      ToPort: 3001
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !ImportValue
          Fn::Sub: ${EnvironmentName}-PUBLIC-SUBNET-1
        - !ImportValue
          Fn::Sub: ${EnvironmentName}-PUBLIC-SUBNET-2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-api-tg
      Protocol: HTTP
      Port: 3001
      VpcId: !ImportValue
        Fn::Sub: ${EnvironmentName}-VPC-ID
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !ImportValue
        Fn::Sub: ${EnvironmentName}-ECS-TASK-ROLE-ARN
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-api
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 3001
              Protocol: tcp
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: 3001
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Secrets:
            - Name: DB_HOST
              ValueFrom: !Sub 
                - '${SecretArn}:host::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_PORT
              ValueFrom: !Sub 
                - '${SecretArn}:port::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_NAME
              ValueFrom: !Sub 
                - '${SecretArn}:dbname::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_USER
              ValueFrom: !Sub 
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: DB_PASSWORD
              ValueFrom: !Sub 
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-DB-SECRET-ARN
            - Name: S3_DOCUMENTS_BUCKET
              ValueFrom: !Sub 
                - '${SecretArn}:documents_bucket::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
            - Name: S3_REPORTS_BUCKET
              ValueFrom: !Sub 
                - '${SecretArn}:reports_bucket::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-S3-CONFIG-SECRET-ARN
            - Name: JWT_SECRET
              ValueFrom: !Sub 
                - '${SecretArn}:secret::'
                - SecretArn: !ImportValue
                    Fn::Sub: ${EnvironmentName}-JWT-SECRET-ARN
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-api-service
      Cluster: !Sub ${EnvironmentName}-cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-PRIVATE-SUBNET-1
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-PRIVATE-SUBNET-2
          SecurityGroups:
            - !ImportValue
              Fn::Sub: ${EnvironmentName}-ECS-SG-ID
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Sub ${EnvironmentName}-api
          ContainerPort: 3001
      HealthCheckGracePeriodSeconds: 60

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}-ALB-URL

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALB-DNS